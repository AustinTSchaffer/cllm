#!/bin/bash

set -e  # Exit immediately if any command returns a non-zero status


# Function to display usage information
usage() {
  echo "Usage: $0 <parameter> [-y]"
  echo "  <parameter> : The parameter to be passed to the command. Example: 'list-buckets'"
  echo "  -y          : Skip confirmation prompt."
  exit 1
}

# Check if at least one argument is provided
if [ $# -lt 1 ]; then
  usage
fi

# Initialize variables
parameter=$1
skip_confirmation=false

# Check for the -y flag to skip confirmation
for arg in "$@"; do
  case "$arg" in
    -y)
      skip_confirmation=true
      ;;
  esac
done

# Define the command to be executed
command="aws"
cmd=$(cllm -pp "command=${command}" -s bash gpt/4o "{{$parameter}}" 2>/dev/null | jq -r '.code' 2>/dev/null)

# Check if the 'cllm' or 'jq' commands failed
if [ $? -ne 0 ]; then
  echo "Error: Failed to generate the command. Ensure 'cllm' and 'jq' are installed and working correctly."
  exit 1
fi

# Function to run the command and handle errors
run_command() {
  eval "${cmd}"
  if [ $? -ne 0 ]; then
    echo "Error: Command execution failed"
    eval "${cmd}" 2>&1 | cllm gpt/4o "Example this error. Suggest a solution."
    exit 1
  fi
}

# Main logic to either run the command directly or ask for confirmation
if [ "$skip_confirmation" == true ]; then
  run_command
else
  echo "Created: '${cmd}'"
  read -p "Run command? (yes, no): " input
  if [ "$input" == "yes" ]; then
    run_command
  fi
fi
